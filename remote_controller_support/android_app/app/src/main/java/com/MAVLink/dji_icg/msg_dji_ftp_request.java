/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE DJI_FTP_REQUEST PACKING
package com.MAVLink.dji_icg;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* Request the drone to prepare for file transmission. Expects an ACK
*/
public class msg_dji_ftp_request extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_DJI_FTP_REQUEST = 50000;
    public static final int MAVLINK_MSG_ID_DJI_FTP_REQUEST_CRC = 203;
    public static final int MAVLINK_MSG_LENGTH = 70;
    private static final long serialVersionUID = MAVLINK_MSG_ID_DJI_FTP_REQUEST;


      
    /**
    * Size of file in bytes.
    */
    public long file_size;
      
    /**
    * System ID (0 for broadcast)
    */
    public short target_system;
      
    /**
    * A number, that gets incremented for every new file sent. Helps identify to which file the consquent messages belong.
    */
    public short file_id;
      
    /**
    * File name, terminated by NULL.
    */
    public short file_name[] = new short[64];
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_DJI_FTP_REQUEST;
        packet.crc_extra = MAVLINK_MSG_ID_DJI_FTP_REQUEST_CRC;
              
        packet.payload.putUnsignedInt(file_size);
              
        packet.payload.putUnsignedByte(target_system);
              
        packet.payload.putUnsignedByte(file_id);
              
        
        for (int i = 0; i < file_name.length; i++) {
            packet.payload.putUnsignedByte(file_name[i]);
        }
                    
        
        return packet;
    }

    /**
    * Decode a dji_ftp_request message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.file_size = payload.getUnsignedInt();
              
        this.target_system = payload.getUnsignedByte();
              
        this.file_id = payload.getUnsignedByte();
              
         
        for (int i = 0; i < this.file_name.length; i++) {
            this.file_name[i] = payload.getUnsignedByte();
        }
                
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_dji_ftp_request(){
        msgid = MAVLINK_MSG_ID_DJI_FTP_REQUEST;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_dji_ftp_request(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_DJI_FTP_REQUEST;
        unpack(mavLinkPacket.payload);
    }

            
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_DJI_FTP_REQUEST - sysid:"+sysid+" compid:"+compid+" file_size:"+file_size+" target_system:"+target_system+" file_id:"+file_id+" file_name:"+file_name+"";
    }
}
        