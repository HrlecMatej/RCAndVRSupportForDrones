/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ROS_ODOMETRY PACKING
package com.MAVLink.dji_icg;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* Simple commands for the drone.
*/
public class msg_ros_odometry extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_ROS_ODOMETRY = 50007;
    public static final int MAVLINK_MSG_ID_ROS_ODOMETRY_CRC = 212;
    public static final int MAVLINK_MSG_LENGTH = 113;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ROS_ODOMETRY;


      
    /**
    * Position
    */
    public double position[] = new double[3];
      
    /**
    * Orientation
    */
    public double orientation[] = new double[4];
      
    /**
    * Linear velocity in the free space.
    */
    public double linear[] = new double[3];
      
    /**
    * Angular velocity in the free space.
    */
    public double angular[] = new double[3];
      
    /**
    * Timestamp - Seconds since epoch
    */
    public long sec;
      
    /**
    * Timestamp since epoch = sec + nsec * 10^-9
    */
    public long nsec;
      
    /**
    * System ID
    */
    public short target_system;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ROS_ODOMETRY;
        packet.crc_extra = MAVLINK_MSG_ID_ROS_ODOMETRY_CRC;
              
        
        for (int i = 0; i < position.length; i++) {
            packet.payload.putDouble(position[i]);
        }
                    
              
        
        for (int i = 0; i < orientation.length; i++) {
            packet.payload.putDouble(orientation[i]);
        }
                    
              
        
        for (int i = 0; i < linear.length; i++) {
            packet.payload.putDouble(linear[i]);
        }
                    
              
        
        for (int i = 0; i < angular.length; i++) {
            packet.payload.putDouble(angular[i]);
        }
                    
              
        packet.payload.putUnsignedInt(sec);
              
        packet.payload.putUnsignedInt(nsec);
              
        packet.payload.putUnsignedByte(target_system);
        
        return packet;
    }

    /**
    * Decode a ros_odometry message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
         
        for (int i = 0; i < this.position.length; i++) {
            this.position[i] = payload.getDouble();
        }
                
              
         
        for (int i = 0; i < this.orientation.length; i++) {
            this.orientation[i] = payload.getDouble();
        }
                
              
         
        for (int i = 0; i < this.linear.length; i++) {
            this.linear[i] = payload.getDouble();
        }
                
              
         
        for (int i = 0; i < this.angular.length; i++) {
            this.angular[i] = payload.getDouble();
        }
                
              
        this.sec = payload.getUnsignedInt();
              
        this.nsec = payload.getUnsignedInt();
              
        this.target_system = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_ros_odometry(){
        msgid = MAVLINK_MSG_ID_ROS_ODOMETRY;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_ros_odometry(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_ROS_ODOMETRY;
        unpack(mavLinkPacket.payload);
    }

                  
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_ROS_ODOMETRY - sysid:"+sysid+" compid:"+compid+" position:"+position+" orientation:"+orientation+" linear:"+linear+" angular:"+angular+" sec:"+sec+" nsec:"+nsec+" target_system:"+target_system+"";
    }
}
        